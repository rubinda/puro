# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  config.vm.define "namenode" do |namenode|
    namenode.vm.box = "ubuntu/xenial64"

    # Privatni IP nasega namenode
    namenode.vm.network "private_network", ip: "192.168.33.10"
    namenode.vm.hostname = "NameNode"

    # Uporabi po meri narejen private key za SSH
    node_config.ssh.insert_key = false
    node_config.ssh.private_key_path = ["./keys/id_rsa", "~/.vagrant.d/insecure_private_key"]
    node_config.vm.provision "file", source: "./id_rsa.pub", destination: "~/.ssh/authorized_keys"

    # Namesti Java 8 kot privilegiran uporabnik in posodobi /etc/hosts
    # za namenode in 2 datanodes (glej drugi dve instanci ki se 
    # tukaj kreirata)
    namenode.vm.provision "shell", inline: <<-SHELL
      apt update && apt install -y openjdk-8-jre-headless
      echo '192.168.33.10  NameNode\n192.168.33.11  DataNode1\n192.168.33.12  DataNode2' >> /etc/hosts
    SHELL
  
    # Ostale ukaze izvedi kot neprivilegiran
    namenode.vm.provision "shell", privileged: false, inline: <<-SHELL
      # Dodaj Javo v Path
      echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> /home/vagrant/.bashrc

      # Prenesi Hadoop (stable v casu izdelave je 2.9.2) in ga namesti 
      # v /usr/local/hadoop. Povej mu se za Javo
      wget https://www-us.apache.org/dist/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz
      tar -xvf hadoop-2.9.2.tar.gz >> /dev/null
      rm hadoop-2.9.2.tar.gz
      mv hadoop-2.9.2 /usr/local/hadoop
      mkdir -p /usr/local/hadoop_work/hdfs/namenode
      mkdir -p /usr/local/hadoop_work/hdfs/namesecondary
      echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> /usr/local/hadoop/etc/hadoop/hadoop-env.sh

      # Ugasni preverjanje kljucev in zgeneriraj nov kljuc za dostop
      # brez gesla do localhost
      echo -e 'Host *\n\tStrictHostKeyChecking no\n' >> /home/vagrant/.ssh/config
      ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa
      cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
      chmod 0600 ~/.ssh/authorized_keys

      # Nastavi system variables znotraj .bashrc
      echo -e 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      export PATH=$PATH:$JAVA_HOME/bin
      export HADOOP_HOME=/usr/local/hadoop
      export PATH=$PATH:$HADOOP_HOME/bin
      export PATH=$PATH:$HADOOP_HOME/sbin
      export HADOOP_MAPRED_HOME=$HADOOP_HOME
      export HADOOP_COMMON_HOME=$HADOOP_HOME
      export HADOOP_HDFS_HOME=$HADOOP_HOME
      export YARN_HOME=$HADOOP_HOME
      export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
      export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"
      export CLASSPATH=$CLASSPATH:/usr/local/hadoop/lib/*:.
      export HADOOP_OPTS="$HADOOP_OPTS -Djava.security.egd=file:/dev/../dev/urandom"' >> /home/vagrant/.bashrc

      # V masters datoteko podaj zapis za Hostname od namenode
      echo 'NameNode' >> /usr/local/hadoop/etc/hadoop/masters
      echo -e 'DataNode1\nDataNode2' >> /usr/local/hadoop/etc/hadoop/slaves
      # Formatiraj namenode
      hadoop namenode -format 
    SHELL
    
    # Skopiraj konfiguracijske datoteke na streznik
    namenode.vm.provision "file", source: "./config/core-site.xml", destination: "/usr/local/hadoop/etc/hadoop/core-site.xml"
    namenode.vm.provision "file", source: "./config/hdfs-site.xml", destination: "/usr/local/hadoop/etc/hadoop/hdfs-site.xml"
    namenode.vm.provision "file", source: "./config/mapred-site.xml", destination: "/usr/local/hadoop/etc/hadoop/mapred-site.xml"
    namenode.vm.provision "file", source: "./config/yarn-site.xml", destination: "/usr/local/hadoop/etc/hadoop/yarn-site.xml"
  end


  # Vozlisce DATANODE1
  config.vm.define "datanode1" do |data1|
    data1.vm.box = "ubuntu/xenial64"

    # Privatni IP nasega datanode in njegov hostname
    namenode.vm.network "private_network", ip: "192.168.33.11"
    namenode.vm.hostname = "DameNode1"

    # Uporabi po meri narejen private key za SSH
    node_config.ssh.insert_key = false
    node_config.ssh.private_key_path = ["./keys/id_rsa", "~/.vagrant.d/insecure_private_key"]
    node_config.vm.provision "file", source: "./id_rsa.pub", destination: "~/.ssh/authorized_keys"

    # Namesti Java 8 kot privilegiran uporabnik in posodobi /etc/hosts
    # za namenode in 2 datanodes (glej drugi dve instanci ki se 
    # tukaj kreirata)
    namenode.vm.provision "shell", inline: <<-SHELL
      apt update && apt install -y openjdk-8-jre-headless
      echo '192.168.33.10  NameNode\n192.168.33.11  DataNode1\n192.168.33.12  DataNode2' >> /etc/hosts
      
      # Nastavi system variables znotraj .bashrc
      echo -e 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      export PATH=$PATH:$JAVA_HOME/bin
      export HADOOP_HOME=/usr/local/hadoop
      export PATH=$PATH:$HADOOP_HOME/bin
      export PATH=$PATH:$HADOOP_HOME/sbin
      export HADOOP_MAPRED_HOME=$HADOOP_HOME
      export HADOOP_COMMON_HOME=$HADOOP_HOME
      export HADOOP_HDFS_HOME=$HADOOP_HOME
      export YARN_HOME=$HADOOP_HOME
      export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
      export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"
      export CLASSPATH=$CLASSPATH:/usr/local/hadoop/lib/*:.
      export HADOOP_OPTS="$HADOOP_OPTS -Djava.security.egd=file:/dev/../dev/urandom"' >> /home/vagrant/.bashrc


      # Skopiraj Hadoop mapo iz NameNode
      mkdir -p /usr/local/hadoop_work/hdfs/datanode
      mkdir -p /usr/local/hadoop_work/yarn/local
      mkdir -p /usr/local/hadoop_work/yarn/log
      scp -r NameNode:/usr/local/hadoop /usr/local
    SHELL
  end


  # Vozlisce DATANODE2
  config.vm.define "datanode2" do |data2|
    data2.vm.box = "ubuntu/xenial64"

    # Privatni IP nasega datanode in njegov hostname
    namenode.vm.network "private_network", ip: "192.168.33.12"
    namenode.vm.hostname = "DameNode2"

    # Uporabi po meri narejen private key za SSH
    node_config.ssh.insert_key = false
    node_config.ssh.private_key_path = ["./keys/id_rsa", "~/.vagrant.d/insecure_private_key"]
    node_config.vm.provision "file", source: "./id_rsa.pub", destination: "~/.ssh/authorized_keys"

    # Namesti Java 8 kot privilegiran uporabnik in posodobi /etc/hosts
    # za namenode in 2 datanodes (glej drugi dve instanci ki se 
    # tukaj kreirata)
    namenode.vm.provision "shell", inline: <<-SHELL
      apt update && apt install -y openjdk-8-jre-headless
      echo '192.168.33.10  NameNode\n192.168.33.11  DataNode1\n192.168.33.12  DataNode2' >> /etc/hosts

      # Nastavi system variables znotraj .bashrc
      echo -e 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      export PATH=$PATH:$JAVA_HOME/bin
      export HADOOP_HOME=/usr/local/hadoop
      export PATH=$PATH:$HADOOP_HOME/bin
      export PATH=$PATH:$HADOOP_HOME/sbin
      export HADOOP_MAPRED_HOME=$HADOOP_HOME
      export HADOOP_COMMON_HOME=$HADOOP_HOME
      export HADOOP_HDFS_HOME=$HADOOP_HOME
      export YARN_HOME=$HADOOP_HOME
      export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
      export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"
      export CLASSPATH=$CLASSPATH:/usr/local/hadoop/lib/*:.
      export HADOOP_OPTS="$HADOOP_OPTS -Djava.security.egd=file:/dev/../dev/urandom"' >> /home/vagrant/.bashrc

      # Skopiraj Hadoop mapo iz NameNode
      mkdir -p /usr/local/hadoop_work/hdfs/datanode
      mkdir -p /usr/local/hadoop_work/yarn/local
      mkdir -p /usr/local/hadoop_work/yarn/log
      scp -r NameNode:/usr/local/hadoop /usr/local
    SHELL
  end
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
