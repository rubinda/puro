# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
u0 = { 'name' => "trusty0", 'ip' => "192.168.33.10"}
u1 = { 'name' => "trusty1", 'ip' => "192.168.33.11"}
u2 = { 'name' => "trusty2", 'ip' => "192.168.33.12"}
u3 = { 'name' => "trusty3", 'ip' => "192.168.33.13"}
u4 = { 'name' => "trusty4", 'ip' => "192.168.33.14"}
u5 = { 'name' => "trusty5", 'ip' => "192.168.33.15"}
u6 = { 'name' => "trusty6", 'ip' => "192.168.33.16"}
u7 = { 'name' => "trusty7", 'ip' => "192.168.33.17"}
u8 = { 'name' => "trusty8", 'ip' => "192.168.33.18"}
u9 = { 'name' => "trusty9", 'ip' => "192.168.33.19"}
cluster = [u0, u1, u2, u3, u4, u5, u6, u7, u8, u9]

Vagrant.configure("2") do |config|
	 # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "192.168.33.10"
  #config.vm.hostname = "ubuntu0"
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  #config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #	vb.memory = "384"
  #end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  cluster.each do |node|
  	vm_name = node['name']
  	ip = node['ip']	

  	config.vm.define vm_name do |node_config|
  		# Uporabi Ubuntu Trusty (14.04)
  		node_config.vm.box = "ubuntu/trusty64"

  		# Nastavi ip in hostname
  		node_config.vm.network "private_network", ip: ip
  		node_config.vm.hostname = vm_name

  		# Uporabi po meri narejen private key za SSH
      node_config.ssh.insert_key = false
      node_config.ssh.private_key_path = ["./ubuntu_key", "~/.vagrant.d/insecure_private_key"]
      node_config.vm.provision "file", source: "./ubuntu_key.pub", destination: "~/.ssh/authorized_keys"

  		# Kopiraj private ssh key na vsako instanco (da se lahko povezujejo med seboj)
  		node_config.vm.provision "file", source: "./ubuntu_key", destination: "~/.ssh/ubuntu_key"

  		# Kopiraj HOSTS datoteko za posamezne instance
  		node_config.vm.provision "file", source: "./trusty_hosts", destination: "~/trusty_hosts"

  		# Kopiraj SSH Config na node
  		node_config.vm.provision "file", source: "./ssh_config", destination: "~/.ssh/config"

  		# Povej virtualbox da naj dodeli 384MB RAM
  		node_config.vm.provider "virtualbox" do |vb|
  			vb.name = vm_name
		  	vb.memory = "384"
		end

		# Namesti se pssh v vsako instanco
		node_config.vm.provision "shell", inline: <<-SHELL
	    	apt-get update
	    	apt-get install -y pssh openmpi-bin libopenmpi-dev python3-dev python3-pip nginx
	    	cat trusty_hosts >> /etc/hosts
        	sudo fallocate -l 512M /swapfile && sudo chmod 600 /swapfile && sudo mkswap /swapfile && sudo swapon /swapfile
	  		pip3 install --upgrade pip
        pip install mpi4py
	  	SHELL
  	end
  end

end
